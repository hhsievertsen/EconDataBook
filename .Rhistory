install.packages("haven")
setwd("C:\\Users\\hs17922\\OneDrive - University of Bristol\\Desktop\\Lab for week 4 [Hans on Data management]")
df<-read_sas("m_d_806.sas7bdat")
library("haven")
setwd("C:\\Users\\hs17922\\OneDrive - University of Bristol\\Desktop\\Lab for week 4 [Hans on Data management]")
df<-read_sas("m_d_806.sas7bdat")
View(df)
df<-read_sas("m_d_903.sas7bdat")
View(df)
library("tidyverse")
write_csv(df,"1990census.csv"
)
View(df)
setwd("C:/Users/hs17922/Dropbox/Work/Teaching/Economic Data/quiz")
library(shiny)
library(aewr)
library(dplyr)
rm(list=ls())
source("myui.R")
source("myserver.R")
shinyApp(ui,server)
runApp()
options(encoding = "UTF-8")
runApp()
#setwd("C:/Users/hs17922/Dropbox/Work/Teaching/Economic Data/quiz")
library(shiny)
library(aewr)
library(dplyr)
rm(list=ls())
source("myui.R")
source("myserver.R")
shinyApp(ui,server)
paste("<b>Consider the following small economy:</b><br> <br> In this economy. we have one farm that produces flour. The farm sells the flour to a bakery for ", factory_sales,
"?. The farm employs workers who receive ", factory_wages, "? in wages. The farm pays ",
factory_taxes," ? in taxes to the Government. <br><br>Using the flour from the farm, the bakery workers create scones. The bakery sells scones for ",
domestic_demand,"? to the local inhabitants and exports scones for ", exports, "?. ",
"<br><br>The  bakery workers receive ", supermarket_wages, "? in wages, and the bakery pays ", supermarket_taxes,
"? in taxes. The public sector provides a health service and a school for all inhabitants. The Government pays the health workers and  teachers ",public_sector,
"? in wages. The public sector has no expenses beyond these wages. <br><br> The inhabitants of this economy pay ", taxes_wages, "? in taxes. They also import clotted cream from the neighbouring economy for ",
imports,"?. The bakery is owned by a woman in the neighbouring economy.<br><br> <b>What is the GDP of this economy?</b>", sep="")
paste("<b>Consider the following small economy:</b><br> <br> In this economy. we have one farm that produces flour. The farm sells the flour to a bakery for ", factory_sales,
"?. The farm employs workers who receive ", factory_wages, "? in wages. The farm pays ",
factory_taxes," ? in taxes to the Government. <br><br>Using the flour from the farm, the bakery workers create scones. The bakery sells scones for ",
domestic_demand,"? to the local inhabitants and exports scones for ", exports, "?. ",
"<br><br>The  bakery workers receive ", supermarket_wages, "? in wages, and the bakery pays ", supermarket_taxes,
"? in taxes. The public sector provides a health service and a school for all inhabitants. The Government pays the health workers and  teachers ",public_sector,
"? in wages. The public sector has no expenses beyond these wages. <br><br> The inhabitants of this economy pay ", taxes_wages, "? in taxes. They also import clotted cream from the neighbouring economy for ",
imports,"?. The bakery is owned by a woman in the neighbouring economy.<br><br> <b>What is the GDP of this economy?</b>", sep="")
### GDP simulator
rm(list=ls())
# factory
factory_sales=sample(5:15,1)
factory_taxes=sample(1:(factory_sales-3),1)
factory_wages=sample(1:(factory_sales-factory_taxes),1)
factory_profit=factory_sales-factory_taxes-factory_wages
# supermarket
supermarket_sales=sample((factory_sales+10):50,1) # Low [15,25] High [50]
supermarket_wages=sample(2:(supermarket_sales-factory_sales-2),1) # Low [2] High [43]
supermarket_taxes=sample(2:(supermarket_sales-supermarket_wages-factory_sales),1) # Low [1] High [41]
supermarket_profit=supermarket_sales-supermarket_taxes-supermarket_wages-factory_sales # Low [0] High [39]
# household sector
taxes_wages<-sample(1:(factory_wages+supermarket_wages-2),1)
# public sector
public_sector=taxes_wages+factory_taxes+supermarket_taxes
# domestic demand
domestic_demand=sample(1:(factory_wages+supermarket_wages+public_sector-taxes_wages),1)
# Residual
exports=supermarket_sales-domestic_demand
imports=factory_wages+supermarket_wages+public_sector-domestic_demand-taxes_wages
### Expenditure approach
c=imports+domestic_demand
g=taxes_wages+factory_taxes+supermarket_taxes
nx=exports-imports
i=0
gdp_e=c+g+nx
### Output approach
gva_factory=factory_sales-factory_taxes
gva_supermarket=supermarket_sales-factory_sales-supermarket_taxes
gva_public=public_sector
nt_o=factory_taxes+supermarket_taxes
gdp_o=gva_factory+gva_supermarket+nt_o+gva_public
### Income approach
wages=factory_wages+supermarket_wages+public_sector
profits=factory_profit+supermarket_profit
nt_i=factory_taxes+supermarket_taxes
gdp_i=wages+profits+nt_i
part1<-paste("<b>Consider the following small economy:</b><br> <br> In this economy. we have one farm that produces flour. The farm sells the flour to a bakery for ", factory_sales,
"?. The farm employs workers who receive ", factory_wages, "? in wages. The farm pays ",
factory_taxes," ? in taxes to the Government. <br><br>Using the flour from the farm, the bakery workers create scones. The bakery sells scones for ",
domestic_demand,"? to the local inhabitants and exports scones for ", exports, "?. ",
"<br><br>The  bakery workers receive ", supermarket_wages, "? in wages, and the bakery pays ", supermarket_taxes,
"? in taxes. The public sector provides a health service and a school for all inhabitants. The Government pays the health workers and  teachers ",public_sector,
"? in wages. The public sector has no expenses beyond these wages. <br><br> The inhabitants of this economy pay ", taxes_wages, "? in taxes. They also import clotted cream from the neighbouring economy for ",
imports,"?. The bakery is owned by a woman in the neighbouring economy.<br><br> <b>What is the GDP of this economy?</b>", sep="")
runApp()
Sys.setlocale(, 'en_UK.UTF-8')
Sys.setlocale(, 'en_GB.UTF-8')
Sys.setlocale(, 'en_GS.UTF-8')
options(encoding = "en_GB.UTF-")
options(encoding = "en_GB.UTF-8")
#setwd("C:/Users/hs17922/Dropbox/Work/Teaching/Economic Data/quiz")
library(shiny)
library(aewr)
library(dplyr)
rm(list=ls())
source("myui.R")
source("myserver.R")
shinyApp(ui,server)
#setwd("C:/Users/hs17922/Dropbox/Work/Teaching/Economic Data/quiz")
library(shiny)
library(aewr)
library(dplyr)
rm(list=ls())
source("myui.R")
source("myserver.R")
shinyApp(ui,server)
setwd("C:/Users/hs17922/Dropbox/Work/Teaching/Economic Data/quiz")
library(shiny)
library(aewr)
library(dplyr)
rm(list=ls())
source("myui.R")
source("myserver.R")
shinyApp(ui,server)
library(shiny)
library(aewr)
library(dplyr)
rm(list=ls())
source("myui.R")
source("myserver.R")
shinyApp(ui,server)
library(shiny)
library(aewr)
library(dplyr)
rm(list=ls())
source("myui.R")
source("myserver.R")
shinyApp(ui,server)
library(shiny)
library(aewr)
library(dplyr)
rm(list=ls())
source("myui.R")
source("myserver.R")
shinyApp(ui,server)
library(shiny)
library(aewr)
library(dplyr)
rm(list=ls())
source("myui.R")
source("myserver.R")
shinyApp(ui,server)
server <- function(input, output,session) {
# Set seed fct
setseed<-function(seed){
if (is.numeric(input$studentid)){
seed=input$studentid
}
else{
seed=1
}
set.seed(seed)
}
# Listen to id provided
observeEvent(input$studentid, {
# QUESTION 1
source("./questions/question1.R", local = TRUE)
# QUESTION 2
source("./questions/question2.R", local = TRUE)
# QUESTION 3
source("./questions/question3.R", local = TRUE)
# QUESTION 3
source("./questions/question4.R", local = TRUE)
})
}
# Generate questions
create_questions <- lapply(1:4, function(v) {
tabPanel(paste("Question",v),
h3(paste("Question ", v, sep="")),br(),
htmlOutput (paste("qq", v,sep="")),
textInput(paste("qa", v,sep=""), " ", ""),
actionButton(paste("qb", v,sep=""), "Check answer"),
textOutput(paste("qf", v,sep="")))
})
# Setup UI
ui <- pageWithSidebarui <- fluidPage(
#
theme = "style.css",
# App title ----
titlePanel("Economic Data 2020/21 - Quiz "),
# sidebar
fluidRow(column(7,do.call(navlistPanel,create_questions)),
column(5,
mainPanel(
# Intro
br("This is a quiz for Economic Data - EFIM 10016 - Univeristy of Bristol -  2020/21."),br(),
# Set seed
numericInput("studentid", "Change the value to generate a new set of questions.", 0, min = -1000000, max = 9000000),
width = 12
)))
)
library(shiny)
library(aewr)
library(dplyr)
rm(list=ls())
source("myui.R")
source("myserver.R")
shinyApp(ui,server)
setwd("C:/Users/hs17922/Dropbox/Work/Teaching/Economic Data/2020_2021/week 10/slides")
library("tidyverse")
df<-read_csv("coordinates.csv")
setwd("C:/Users/hs17922/Dropbox/Work/Teaching/Economic Data/2020_2021/week 10/slides")
library("tidyverse")
df<-read_csv("coordinates.csv")
setwd("C:/Users/hs17922/Dropbox/Work/Teaching/Economic Data/2020_2021/week 10/slides")
library("tidyverse")
df<-read_csv("coordinates.csv")
ggplot(df,aes(x=X,y=Y))+geom_point()
setwd("C:/Users/hs17922/Dropbox/Work/Teaching/Economic Data/2020_2021/week 10/slides")
library("tidyverse")
df<-read_csv("coordinates.csv")
ggplot(df,aes(x=X,y=Y))+geom_point()+ coord_fixed(ratio=1.6)
setwd("C:/Users/hs17922/Dropbox/Work/Teaching/Economic Data/2020_2021/week 10/slides")
library("tidyverse")
df<-read_csv("coordinates.csv")
ggplot(df,aes(x=X,y=Y))+geom_point(alpha=0.2)+ coord_fixed(ratio=1.6)
setwd("C:/Users/hs17922/Dropbox/Work/Teaching/Economic Data/2020_2021/week 10/slides")
library("tidyverse")
df<-read_csv("coordinates.csv")
ggplot(df,aes(x=X,y=Y))+geom_point(alpha=0.1)+ coord_fixed(ratio=1.6)
ggplot(df,aes(x=X,y=Y))+
geom_point(alpha=0.1)+
coord_fixed(ratio=1.6)+
theme_void()
UK <- map_data("UK")
UK <- map_data("world") %>%
filter(region == "UK" & subregion == "Northern Ireland")
ggplot(df,aes(x=X,y=Y))+
geom_polygon(UK,x=long,y=lat)+
geom_point(alpha=0.1)+
coord_fixed(ratio=1.6)+
theme_void()
ggplot(df,aes(x=X,y=Y))+
geom_polygon(UK,aes(x=long,y=lat))+
geom_point(alpha=0.1)+
coord_fixed(ratio=1.6)+
theme_void()
ggplot(df,aes(x=X,y=Y))+
geom_polygon(UK,mapping=aes(x=long,y=lat))+
geom_point(alpha=0.1)+
coord_fixed(ratio=1.6)+
theme_void()
UK <- map_data("world") %>%
filter(region == "UK" )
ggplot(df,aes(x=X,y=Y))+
geom_polygon(UK,mapping=aes(x=long,y=lat))+
geom_point(alpha=0.1)+
coord_fixed(ratio=1.6)+
theme_void()
ggplot(df,aes(x=X,y=Y))+
geom_polygon(UK,mapping=aes(x=long,y=lat, group = group))+
geom_point(alpha=0.1)+
coord_fixed(ratio=1.6)+
theme_void()
ggplot(df,aes(x=X,y=Y))+
geom_polygon(UK,mapping=aes(x=long,y=lat, group = group),fill="white")+
geom_point(alpha=0.1)+
coord_fixed(ratio=1.6)+
theme_void()
ggplot(df,aes(x=X,y=Y))+
geom_polygon(UK,mapping=aes(x=long,y=lat, group = group),fill="white",colour="black")+
geom_point(alpha=0.1)+
coord_fixed(ratio=1.6)+
theme_void()
ggplot(df,aes(x=X,y=Y))+
geom_polygon(UK,mapping=aes(x=long,y=lat, group = group),fill="white",colour="black",alpha=0.2)+
geom_point(alpha=0.1)+
coord_fixed(ratio=1.6)+
theme_void()
library("aewr")
library("modelsummary")
library("tidyverse")
analysisdata%>%
filter(year==2)%>%
select(female,starts_with("paren"),letter,summerschool,test_score)%>%
datasummary_skim()
analysisdata%>%
filter(year==2)%>%
select(female,starts_with("paren"),letter,summerschool,test_score)%>%
datasummary_skim(output = "ex.png")
analysisdata%>%
filter(year==2)%>%
select(female,starts_with("paren"),letter,summerschool,test_score)%>%
datasummary_skim(output = "markdown")
analysisdata%>%
filter(year==2)%>%
select(female,starts_with("paren"),letter,summerschool,test_score)%>%
datasummary_skim(output = "html")
install.packges("lfe")
install.packages("lfe")
regdata<-analysisdata%>%filter(year==6)
# Estimate IV specification with felm
m1<-felm(test_score~parental_lincome+female+parental_schooling| # Outcome eq.
school_id|                                           # Fixed effects
summerschool~letter|                                 # First stage eq.
school_id                                            # Cluster var
,data=regdata, cmethod="reghdfe")
library("lfe")
regdata<-analysisdata%>%filter(year==6)
# Estimate IV specification with felm
m1<-felm(test_score~parental_lincome+female+parental_schooling| # Outcome eq.
school_id|                                           # Fixed effects
summerschool~letter|                                 # First stage eq.
school_id                                            # Cluster var
,data=regdata, cmethod="reghdfe")
m1
install.packages("devtools")
install_github("sgaure/lfe")
install.packages("devtools")
library("devtools")
install_github("sgaure/lfe")
detach("package:lfe", unload = TRUE)
install_github("sgaure/lfe")
install_github("sgaure/lfe")
